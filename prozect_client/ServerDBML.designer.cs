#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace prozect_client
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Trofot")]
	public partial class ServerDBMLDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertMedicine(Medicine instance);
    partial void UpdateMedicine(Medicine instance);
    partial void DeleteMedicine(Medicine instance);
    partial void InsertPharmacist(Pharmacist instance);
    partial void UpdatePharmacist(Pharmacist instance);
    partial void DeletePharmacist(Pharmacist instance);
    partial void InsertPrescription(Prescription instance);
    partial void UpdatePrescription(Prescription instance);
    partial void DeletePrescription(Prescription instance);
    #endregion
		
		public ServerDBMLDataContext() : 
				base(global::prozect_client.Properties.Settings.Default.TrofotConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ServerDBMLDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ServerDBMLDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ServerDBMLDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ServerDBMLDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<Medicine> Medicines
		{
			get
			{
				return this.GetTable<Medicine>();
			}
		}
		
		public System.Data.Linq.Table<Pharmacist> Pharmacists
		{
			get
			{
				return this.GetTable<Pharmacist>();
			}
		}
		
		public System.Data.Linq.Table<Prescription> Prescriptions
		{
			get
			{
				return this.GetTable<Prescription>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Client")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IdNumber;
		
		private string _FirstName;
		
		private string _Lastname;
		
		private string _PhoneNumber;
		
		private EntitySet<Prescription> _Prescriptions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdNumberChanging(string value);
    partial void OnIdNumberChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastnameChanging(string value);
    partial void OnLastnameChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    #endregion
		
		public Client()
		{
			this._Prescriptions = new EntitySet<Prescription>(new Action<Prescription>(this.attach_Prescriptions), new Action<Prescription>(this.detach_Prescriptions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdNumber", DbType="NChar(9) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IdNumber
		{
			get
			{
				return this._IdNumber;
			}
			set
			{
				if ((this._IdNumber != value))
				{
					this.OnIdNumberChanging(value);
					this.SendPropertyChanging();
					this._IdNumber = value;
					this.SendPropertyChanged("IdNumber");
					this.OnIdNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lastname", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string Lastname
		{
			get
			{
				return this._Lastname;
			}
			set
			{
				if ((this._Lastname != value))
				{
					this.OnLastnameChanging(value);
					this.SendPropertyChanging();
					this._Lastname = value;
					this.SendPropertyChanged("Lastname");
					this.OnLastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Prescription", Storage="_Prescriptions", ThisKey="IdNumber", OtherKey="IdClient")]
		public EntitySet<Prescription> Prescriptions
		{
			get
			{
				return this._Prescriptions;
			}
			set
			{
				this._Prescriptions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Medicines")]
	public partial class Medicine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _GenericName;
		
		private string _BrandName;
		
		private string _MedType;
		
		private string _TakeOption;
		
		private EntitySet<Prescription> _Prescriptions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGenericNameChanging(string value);
    partial void OnGenericNameChanged();
    partial void OnBrandNameChanging(string value);
    partial void OnBrandNameChanged();
    partial void OnMedTypeChanging(string value);
    partial void OnMedTypeChanged();
    partial void OnTakeOptionChanging(string value);
    partial void OnTakeOptionChanged();
    #endregion
		
		public Medicine()
		{
			this._Prescriptions = new EntitySet<Prescription>(new Action<Prescription>(this.attach_Prescriptions), new Action<Prescription>(this.detach_Prescriptions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenericName", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string GenericName
		{
			get
			{
				return this._GenericName;
			}
			set
			{
				if ((this._GenericName != value))
				{
					this.OnGenericNameChanging(value);
					this.SendPropertyChanging();
					this._GenericName = value;
					this.SendPropertyChanged("GenericName");
					this.OnGenericNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrandName", DbType="NChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string BrandName
		{
			get
			{
				return this._BrandName;
			}
			set
			{
				if ((this._BrandName != value))
				{
					this.OnBrandNameChanging(value);
					this.SendPropertyChanging();
					this._BrandName = value;
					this.SendPropertyChanged("BrandName");
					this.OnBrandNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedType", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string MedType
		{
			get
			{
				return this._MedType;
			}
			set
			{
				if ((this._MedType != value))
				{
					this.OnMedTypeChanging(value);
					this.SendPropertyChanging();
					this._MedType = value;
					this.SendPropertyChanged("MedType");
					this.OnMedTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TakeOption", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string TakeOption
		{
			get
			{
				return this._TakeOption;
			}
			set
			{
				if ((this._TakeOption != value))
				{
					this.OnTakeOptionChanging(value);
					this.SendPropertyChanging();
					this._TakeOption = value;
					this.SendPropertyChanged("TakeOption");
					this.OnTakeOptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicine_Prescription", Storage="_Prescriptions", ThisKey="BrandName", OtherKey="IdMed")]
		public EntitySet<Prescription> Prescriptions
		{
			get
			{
				return this._Prescriptions;
			}
			set
			{
				this._Prescriptions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.Medicine = this;
		}
		
		private void detach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.Medicine = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pharmacist")]
	public partial class Pharmacist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdNumber;
		
		private string _FirstName;
		
		private string _LastName;
		
		private EntitySet<Prescription> _Prescriptions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdNumberChanging(int value);
    partial void OnIdNumberChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    #endregion
		
		public Pharmacist()
		{
			this._Prescriptions = new EntitySet<Prescription>(new Action<Prescription>(this.attach_Prescriptions), new Action<Prescription>(this.detach_Prescriptions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdNumber", DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true)]
		public int IdNumber
		{
			get
			{
				return this._IdNumber;
			}
			set
			{
				if ((this._IdNumber != value))
				{
					this.OnIdNumberChanging(value);
					this.SendPropertyChanging();
					this._IdNumber = value;
					this.SendPropertyChanged("IdNumber");
					this.OnIdNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pharmacist_Prescription", Storage="_Prescriptions", ThisKey="IdNumber", OtherKey="IdPharmacist")]
		public EntitySet<Prescription> Prescriptions
		{
			get
			{
				return this._Prescriptions;
			}
			set
			{
				this._Prescriptions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.Pharmacist = this;
		}
		
		private void detach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.Pharmacist = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Prescription")]
	public partial class Prescription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IdMed;
		
		private string _IdClient;
		
		private System.DateTime _StartTaking;
		
		private int _EndOfTaking;
		
		private System.Nullable<int> _AmountMorning;
		
		private System.Nullable<int> _amountNoon;
		
		private System.Nullable<int> _amountNight;
		
		private int _IdPharmacist;
		
		private int _id;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<Pharmacist> _Pharmacist;
		
		private EntityRef<Medicine> _Medicine;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdMedChanging(string value);
    partial void OnIdMedChanged();
    partial void OnIdClientChanging(string value);
    partial void OnIdClientChanged();
    partial void OnStartTakingChanging(System.DateTime value);
    partial void OnStartTakingChanged();
    partial void OnNumOfDaysChanging(int value);
    partial void OnNumOfDaysChanged();
    partial void OnAmountMorningChanging(System.Nullable<int> value);
    partial void OnAmountMorningChanged();
    partial void OnAmountNoonChanging(System.Nullable<int> value);
    partial void OnAmountNoonChanged();
    partial void OnAmountNightChanging(System.Nullable<int> value);
    partial void OnAmountNightChanged();
    partial void OnIdPharmacistChanging(int value);
    partial void OnIdPharmacistChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    #endregion
		
		public Prescription()
		{
			this._Client = default(EntityRef<Client>);
			this._Pharmacist = default(EntityRef<Pharmacist>);
			this._Medicine = default(EntityRef<Medicine>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdMed", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string IdMed
		{
			get
			{
				return this._IdMed;
			}
			set
			{
				if ((this._IdMed != value))
				{
					if (this._Medicine.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdMedChanging(value);
					this.SendPropertyChanging();
					this._IdMed = value;
					this.SendPropertyChanged("IdMed");
					this.OnIdMedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdClient", DbType="NChar(9) NOT NULL", CanBeNull=false)]
		public string IdClient
		{
			get
			{
				return this._IdClient;
			}
			set
			{
				if ((this._IdClient != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdClientChanging(value);
					this.SendPropertyChanging();
					this._IdClient = value;
					this.SendPropertyChanged("IdClient");
					this.OnIdClientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTaking", DbType="Date NOT NULL")]
		public System.DateTime StartTaking
		{
			get
			{
				return this._StartTaking;
			}
			set
			{
				if ((this._StartTaking != value))
				{
					this.OnStartTakingChanging(value);
					this.SendPropertyChanging();
					this._StartTaking = value;
					this.SendPropertyChanged("StartTaking");
					this.OnStartTakingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="EndOfTaking", Storage="_EndOfTaking", DbType="int NOT NULL")]
		public int NumOfDays
		{
			get
			{
				return this._EndOfTaking;
			}
			set
			{
				if ((this._EndOfTaking != value))
				{
					this.OnNumOfDaysChanging(value);
					this.SendPropertyChanging();
					this._EndOfTaking = value;
					this.SendPropertyChanged("NumOfDays");
					this.OnNumOfDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountMorning", DbType="Int")]
		public System.Nullable<int> AmountMorning
		{
			get
			{
				return this._AmountMorning;
			}
			set
			{
				if ((this._AmountMorning != value))
				{
					this.OnAmountMorningChanging(value);
					this.SendPropertyChanging();
					this._AmountMorning = value;
					this.SendPropertyChanged("AmountMorning");
					this.OnAmountMorningChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="amountNoon", Storage="_amountNoon", DbType="Int")]
		public System.Nullable<int> AmountNoon
		{
			get
			{
				return this._amountNoon;
			}
			set
			{
				if ((this._amountNoon != value))
				{
					this.OnAmountNoonChanging(value);
					this.SendPropertyChanging();
					this._amountNoon = value;
					this.SendPropertyChanged("AmountNoon");
					this.OnAmountNoonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="amountNight", Storage="_amountNight", DbType="Int")]
		public System.Nullable<int> AmountNight
		{
			get
			{
				return this._amountNight;
			}
			set
			{
				if ((this._amountNight != value))
				{
					this.OnAmountNightChanging(value);
					this.SendPropertyChanging();
					this._amountNight = value;
					this.SendPropertyChanged("AmountNight");
					this.OnAmountNightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPharmacist", DbType="int")]
		public int IdPharmacist
		{
			get
			{
				return this._IdPharmacist;
			}
			set
			{
				if ((this._IdPharmacist != value))
				{
					if (this._Pharmacist.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPharmacistChanging(value);
					this.SendPropertyChanging();
					this._IdPharmacist = value;
					this.SendPropertyChanged("IdPharmacist");
					this.OnIdPharmacistChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id", Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Prescription", Storage="_Client", ThisKey="IdClient", OtherKey="IdNumber", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Prescriptions.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Prescriptions.Add(this);
						this._IdClient = value.IdNumber;
					}
					else
					{
						this._IdClient = default(string);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pharmacist_Prescription", Storage="_Pharmacist", ThisKey="IdPharmacist", OtherKey="IdNumber", IsForeignKey=true)]
		public Pharmacist Pharmacist
		{
			get
			{
				return this._Pharmacist.Entity;
			}
			set
			{
				Pharmacist previousValue = this._Pharmacist.Entity;
				if (((previousValue != value) 
							|| (this._Pharmacist.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pharmacist.Entity = null;
						previousValue.Prescriptions.Remove(this);
					}
					this._Pharmacist.Entity = value;
					if ((value != null))
					{
						value.Prescriptions.Add(this);
						this._IdPharmacist = value.IdNumber;
					}
					else
					{
						this._IdPharmacist = default(int);
					}
					this.SendPropertyChanged("Pharmacist");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicine_Prescription", Storage="_Medicine", ThisKey="IdMed", OtherKey="BrandName", IsForeignKey=true)]
		public Medicine Medicine
		{
			get
			{
				return this._Medicine.Entity;
			}
			set
			{
				Medicine previousValue = this._Medicine.Entity;
				if (((previousValue != value) 
							|| (this._Medicine.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Medicine.Entity = null;
						previousValue.Prescriptions.Remove(this);
					}
					this._Medicine.Entity = value;
					if ((value != null))
					{
						value.Prescriptions.Add(this);
						this._IdMed = value.BrandName;
					}
					else
					{
						this._IdMed = default(string);
					}
					this.SendPropertyChanged("Medicine");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
